{"version":3,"sources":["firebase/config.js","userinfo/userSignIn.js","dashboard/homepage.js","App.js","serviceWorker.js","index.js"],"names":["firebaseApp","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","UserSignin","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","Signup","Signin","SinginEmail","SinginPassword","SingupUser","SingupEmail","SingupPassword","auth","handleSignInChanges","bind","assertThisInitialized","handleSignUpChanges","handleSinginEmail","handleSinginPassword","handleSingupEmail","handleSingupPassword","handleSingupUser","handleSignIn","handleSignUP","setState","emailValue","passwordValue","userValue","email","password","ToastsStore","error","promise","signInWithEmailAndPassword","catch","e","message","username","createUserWithEmailAndPassword","SignInBoxCss","display","SignUpBoxCss","react_default","a","createElement","lib","store","className","es","style","size","id","type","label","lineDirection","placeholder","value","onChange","onClick","Component","Homepage","userEmailLabel","userImgUrl","user","currentUser","handleLogout","signOut","_this2","UserIcon","random","src","role","_ref","simplifiedMenu","concat","menuItems","divider","anchor","x","DropdownMenu","HorizontalAnchors","CENTER","y","VerticalAnchors","OVERLAP","position","Positions","TOP_RIGHT","animationPosition","sameWidth","component","IconSeparator","iconBefore","App","loading","loggedin","data","database","ref","child","handleLoggedIn","handleNotLoggedIn","onAuthStateChanged","firebaseUser","setTimeout","on","snap","val","checkloggedin","react_loader_spinner_default","color","height","width","homepage","userSignIn","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fc4a14cb.chunk.js","sourcesContent":["import firebase from 'firebase'\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBZgL1gKHAcaY-4Y4PGCNfnssztb8IarZU\",\r\n    authDomain: \"moviewebsite-b7ffe.firebaseapp.com\",\r\n    databaseURL: \"https://moviewebsite-b7ffe.firebaseio.com\",\r\n    projectId: \"moviewebsite-b7ffe\",\r\n    storageBucket: \"moviewebsite-b7ffe.appspot.com\",\r\n    messagingSenderId: \"348587192024\",\r\n    appId: \"1:348587192024:web:f4e99bc6e3346a78\"\r\n  };\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig)\r\n\r\n\r\nexport default firebaseApp;","import React ,{Component}from 'react'\r\nimport { Grid, Cell, TextField} from 'react-md'\r\nimport firebaseApp from '../firebase/config'\r\nimport {ToastsContainer, ToastsStore} from 'react-toasts';\r\nimport './userSign.css'\r\n\r\nclass UserSignin extends Component{\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            Signup:'',\r\n            Signin:'none',\r\n            SinginEmail:\"\",\r\n            SinginPassword:\"\",\r\n            SingupUser:\"\",\r\n            SingupEmail:\"\",\r\n            SingupPassword:\"\",\r\n        }\r\n\r\n        this.auth = firebaseApp.auth()\r\n\r\n        this.handleSignInChanges = this.handleSignInChanges.bind(this)\r\n        this.handleSignUpChanges = this.handleSignUpChanges.bind(this)\r\n        this.handleSinginEmail = this.handleSinginEmail.bind(this)\r\n        this.handleSinginPassword = this.handleSinginPassword.bind(this)\r\n        this.handleSingupEmail = this.handleSingupEmail.bind(this)\r\n        this.handleSingupPassword = this.handleSingupPassword.bind(this)\r\n        this.handleSingupUser = this.handleSingupUser.bind(this)\r\n        this.handleSignIn = this.handleSignIn.bind(this)\r\n        this.handleSignUP = this.handleSignUP.bind(this)\r\n    }\r\n    \r\n    handleSignInChanges(){\r\n        this.setState({\r\n            Signin:'',\r\n            Signup:'none',\r\n            SinginEmail:\"\",\r\n            SinginPassword:\"\",\r\n            SingupUser:\"\",\r\n            SingupEmail:\"\",\r\n            SingupPassword:\"\",\r\n        })\r\n    }\r\n\r\n    handleSignUpChanges(){\r\n        this.setState({\r\n            Signin:'none',\r\n            Signup:'',\r\n            SinginEmail:\"\",\r\n            SinginPassword:\"\",\r\n            SingupUser:\"\",\r\n            SingupEmail:\"\",\r\n            SingupPassword:\"\",\r\n        })\r\n    }\r\n\r\n    handleSinginEmail(emailValue){\r\n        this.setState({\r\n            SinginEmail: emailValue\r\n        })\r\n    }\r\n\r\n    handleSinginPassword(passwordValue){\r\n        this.setState({\r\n            SinginPassword: passwordValue\r\n        })\r\n    }\r\n\r\n    handleSingupEmail(emailValue){\r\n        this.setState({\r\n            SingupEmail: emailValue\r\n        })\r\n    }\r\n\r\n    handleSingupPassword(passwordValue){\r\n        this.setState({\r\n            SingupPassword : passwordValue\r\n        })\r\n    }\r\n\r\n    handleSingupUser(userValue){\r\n        this.setState({\r\n            SingupUser: userValue\r\n        })\r\n    }\r\n\r\n\r\n    handleSignIn(){\r\n        this.email = this.state.SinginEmail\r\n        this.password = this.state.SinginPassword\r\n        if(this.email===\"\" || this.password===\"\"){\r\n            ToastsStore.error('You need to fill the input box to get SignIn')\r\n        }else{\r\n            const promise = this.auth.signInWithEmailAndPassword(this.email,this.password)\r\n            promise.catch(e => ToastsStore.error(e.message))\r\n            if(promise.catch() === -1){\r\n                this.setState({\r\n                    SinginEmail:\"\",\r\n                    SinginPassword:\"\",\r\n                })   \r\n            }\r\n        }\r\n        \r\n    }\r\n\r\n    handleSignUP(){\r\n        this.email = this.state.SingupEmail\r\n        this.password = this.state.SingupPassword\r\n        this.username = this.state.SingupUser\r\n        if(this.email===\"\" || this.password===\"\"|| this.username===\"\"){\r\n            ToastsStore.error('You need to fill the input box to get SignUp')\r\n        }else{\r\n            const promise = this.auth.createUserWithEmailAndPassword(this.email,this.password)\r\n            promise.catch(e => ToastsStore.error(e.message))\r\n\r\n            if(promise.catch() === -1){\r\n                this.setState({\r\n                        SingupEmail:\"\",\r\n                        SingupPassword:\"\",\r\n                        SingupUser:\"\"\r\n                })   \r\n            }\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const SignInBoxCss ={\r\n            display: this.state.Signup\r\n        }\r\n        const SignUpBoxCss ={\r\n            display: this.state.Signin\r\n        }\r\n        return(\r\n            <div>\r\n                <ToastsContainer store={ToastsStore} className=\"ToasterLeftTopSide\"/>\r\n                \r\n                <Grid className='UserSigninBox' style={SignInBoxCss}>\r\n                    <Cell size={8}>\r\n                        <div className='SingInArea'>\r\n                            <h2>Sign in To The Site</h2>\r\n                            <TextField\r\n                                id=\"floating-center-title\"\r\n                                type=\"email\"\r\n                                label=\"Email\"\r\n                                lineDirection=\"center\"\r\n                                placeholder=\"Enter your email...\"\r\n                                value={this.state.SinginEmail}\r\n                                onChange={this.handleSinginEmail}\r\n                                className=\"md-cell md-cell--bottom inputfill\"\r\n                            />\r\n                            <TextField\r\n                                id=\"floating-password\"\r\n                                type=\"password\"\r\n                                label=\"Password\"\r\n                                lineDirection=\"center\"\r\n                                placeholder=\"Enter your password...\"\r\n                                value={this.state.SinginPassword}\r\n                                onChange={this.handleSinginPassword}\r\n                                className=\"md-cell md-cell--bottom inputfill\"\r\n                            />\r\n                            <br/><br/>\r\n                            <button className=\"Submitebutton\" onClick={this.handleSignIn}>SIGN IN</button>\r\n                        </div>\r\n                    </Cell>\r\n                    <Cell size={4} className='SingInTextArea' >\r\n                            <div className=\"SignText\">\r\n                                <h3>Welcome back!</h3>\r\n                                <br/>\r\n                                <p>this website is just for testing so dont enter any of your persinal details please</p>\r\n                                <br/>\r\n                                <button className='SignUpbutton' onClick={this.handleSignInChanges}>SIGN UP</button>\r\n                            </div>\r\n                    </Cell>\r\n                </Grid>\r\n\r\n                <Grid className='UserSignUpBox' style={SignUpBoxCss}>\r\n                    <Cell size={4} className='SingInTextArea' >\r\n                            <div className=\"SignText\">\r\n                                <h3>Hello Friend!</h3>\r\n                                <br/>\r\n                                <p>this website doesn't secure any kind of password or persinal infos.It saves date in plane text so please don't integrate your persinal infos here</p>\r\n                                <br/>\r\n                                <button className='SignUpbutton' onClick={this.handleSignUpChanges}>SIGN IN</button>\r\n                            </div>\r\n                    </Cell>\r\n                    <Cell size={8}>\r\n                        <div className='SingInArea'>\r\n                            <h2>Create Account</h2>\r\n                            <TextField\r\n                                id=\"floating-center-title\"\r\n                                label=\"UserName\"\r\n                                lineDirection=\"center\"\r\n                                placeholder=\"Enter your username...\"\r\n                                value={this.state.SingupUser}\r\n                                onChange={this.handleSingupUser}\r\n                                className=\"md-cell md-cell--bottom inputfill\"\r\n                            />\r\n                            <TextField\r\n                                id=\"floating-center-title\"\r\n                                type=\"email\"\r\n                                label=\"Email\"\r\n                                lineDirection=\"center\"\r\n                                placeholder=\"Enter your email...\"\r\n                                value={this.state.SingupEmail}\r\n                                onChange={this.handleSingupEmail}\r\n                                className=\"md-cell md-cell--bottom inputfill\"\r\n                            />\r\n                            <TextField\r\n                                id=\"floating-center-password\"\r\n                                type=\"password\"\r\n                                label=\"Password\"\r\n                                lineDirection=\"center\"\r\n                                placeholder=\"Enter your password...\"\r\n                                value={this.state.SingupPassword}\r\n                                onChange={this.handleSingupPassword}\r\n                                className=\"md-cell md-cell--bottom inputfill\"\r\n                            />\r\n                            <br/><br/>\r\n                            <button className=\"Submitebutton\" onClick={this.handleSignUP}>SIGN UP</button>\r\n                        </div>\r\n                    </Cell>\r\n                </Grid>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default UserSignin ","import React ,{Component}from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n    Avatar,\r\n    FontIcon,\r\n    AccessibleFakeButton,\r\n    IconSeparator,\r\n    DropdownMenu,\r\n  } from 'react-md';\r\nimport firebaseApp from '../firebase/config'\r\nimport firebase from 'firebase'\r\nimport './dashboard.css'\r\n\r\nclass Homepage extends Component{\r\n\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            userEmailLabel:'something@gmail.com',\r\n            userImgUrl:'',\r\n        }\r\n        this.auth = firebaseApp.auth()\r\n        this.user = firebaseApp.auth().currentUser\r\n\r\n        this.handleLogout = this.handleLogout.bind(this)\r\n    }\r\n\r\n    componentWillMount(){\r\n        \r\n    }\r\n    \r\n    handleLogout(){\r\n        this.auth.signOut()\r\n    }\r\n\r\n    render(){\r\n        const UserIcon = e =>{\r\n            if(this.state.userImgUrl === ''){\r\n                return(<Avatar random>S</Avatar>)\r\n            }else{\r\n                return(<Avatar src={this.state.userImgUrl} role=\"presentation\"/>)\r\n            }\r\n        };\r\n        \r\n        const AccountMenu = ({ simplifiedMenu }) => (\r\n            <div>\r\n                <div className='UserIcon'>\r\n                    <DropdownMenu\r\n                    id={`${!simplifiedMenu ? 'smart-' : ''}avatar-dropdown-menu`}\r\n                    menuItems={['Preferences', 'About', { divider: true }, <div role=\"button\" className=\"md-fake-btn md-pointer--hover md-fake-btn--no-outline md-list-tile md-text Hovered\" onClick={this.handleLogout}>logout</div>]}\r\n                    anchor={{\r\n                        x: DropdownMenu.HorizontalAnchors.CENTER,\r\n                        y: DropdownMenu.VerticalAnchors.OVERLAP,\r\n                    }}\r\n                    position={DropdownMenu.Positions.TOP_RIGHT}\r\n                    animationPosition=\"below\"\r\n                    sameWidth\r\n                    simplifiedMenu={simplifiedMenu}\r\n                    >\r\n                    <AccessibleFakeButton\r\n                        component={IconSeparator}\r\n                        iconBefore\r\n                        label={\r\n                        <IconSeparator label={this.state.userEmailLabel}>\r\n                            <FontIcon>arrow_drop_down</FontIcon>\r\n                        </IconSeparator>\r\n                        }\r\n                    >\r\n                        <UserIcon/>\r\n                    </AccessibleFakeButton>\r\n                    </DropdownMenu>\r\n                </div>\r\n            </div>\r\n          );\r\n          \r\n          AccountMenu.propTypes = {\r\n            simplifiedMenu: PropTypes.bool,\r\n          };\r\n        return(\r\n            <AccountMenu/>\r\n        );\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Homepage","import React ,{Component}from 'react';\nimport UserSignin from './userinfo/userSignIn'\nimport Homepage from './dashboard/homepage'\nimport { Grid, Cell } from 'react-md';\nimport Loader from 'react-loader-spinner'\nimport firebaseApp from './firebase/config'\nimport firebase from 'firebase'\nimport './userinfo/userSign.css'\n\nclass App extends Component {\n\n  constructor(){\n    super()\n\n    this.state= {\n      loading:false,\n      loggedin:false,\n    }\n\n    this.auth = firebaseApp.auth()\n    this.data = firebaseApp.database().ref().child('loading');\n\n    this.handleLoggedIn = this.handleLoggedIn.bind(this)\n    this.handleNotLoggedIn = this.handleNotLoggedIn.bind(this)\n    \n    firebase.auth().onAuthStateChanged(firebaseUser => {\n      if(firebaseUser){\n        this.handleLoggedIn()\n      }else{\n        this.handleNotLoggedIn()\n      }\n    })\n    \n    \n  }\n\n  componentDidMount(){\n    setTimeout(function() {this.data.on('value' , snap => {\n      this.setState({\n        loading: snap.val()\n      })\n    })}.bind(this),4500)\n    \n  }\n\n  handleLoggedIn(){\n    this.setState({\n      loggedin:true,\n    })\n  }\n\n  handleNotLoggedIn(){\n    this.setState({\n      loggedin:false,\n    })\n  }\n  render(){\n    const checkloggedin = this.state.loggedin\n    {\n      if(this.state.loading === false){\n          //Loading screen start\n        return(\n          <div className=\"LoadingScrean\">\n            <Loader type=\"Bars\" color=\"rgb(72, 219, 138)\" height={100} width={100} />\n          </div>\n        );\n\n      }else{\n        //Loading screen done\n\n        if(checkloggedin === true){\n\n          //Homepage if logged in\n          return(\n          <div>\n            <Homepage/>\n          </div>\n          );\n\n        }else{\n          //Sign in Sign up Page if not logged in\n          return(\n          <div>\n            \n              <Grid>\n                <Cell size={1}><span></span></Cell>\n                <Cell size={10}>\n                  <div className='UserSignIn'>\n                    <center>\n                      <UserSignin/>\n                    </center>\n                  </div>   \n                </Cell>\n                <Cell size={1}><span></span></Cell>\n              </Grid>\n          </div>\n          );\n\n        }\n      }\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}