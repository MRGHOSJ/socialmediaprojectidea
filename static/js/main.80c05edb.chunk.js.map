{"version":3,"sources":["firebase/config.js","userinfo/userSignIn.js","dashboard/profilesettings.js","dashboard/home/postsBox.js","dashboard/home/allTheUsers.js","dashboard/home/insideHome.js","dashboard/navbar.js","dashboard/homepage.js","App.js","serviceWorker.js","index.js"],"names":["firebaseApp","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","UserSignin","_this$state","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","Signup","Signin","SinginEmail","SinginPassword","SingupUser","SingupEmail","SingupPassword","SignUpAreaStyle","SignInAreaStyle","ErrorTextOfSignUpPassowrd","ErrorTextOfSignUpUserName","ErrorTextOfSignUpEmail","ErrorTextOfSignInPassowrd","ErrorTextOfSignInEmail","HandleErrorTextOfSignUpPassowrd","HandleErrorTextOfSignUpUserName","defineProperty","auth","firebaseDatabseUsers","database","ref","child","handleSignInChanges","bind","assertThisInitialized","handleSignUpChanges","handleSinginEmail","handleSinginPassword","handleSingupEmail","handleSingupPassword","handleSingupUser","handleSignIn","handleSignUP","_this2","onAuthStateChanged","user","updateProfile","displayName","photoURL","then","uid","set","userID","userIconFirstLetter","toString","charAt","toUpperCase","userEmail","usnerName","userImgUrl","setState","catch","e","ToastsStore","error","message","_this$setState","_this$setState2","emailValue","passwordValue","userValue","newUserVal","slice","_this3","email","password","SignInPassowrdErrMsg","SignInEmailErrMsg","HandleErrorTextOfSignInEmail","HandleErrorTextOfSignInPassword","promise","signInWithEmailAndPassword","_this4","username","SignUpPassowrdErrMsg","SignUpEmailErrMsg","SignUpUserNameErrMsg","HandleErrorTextOfSignUpEmail","createUserWithEmailAndPassword","SignInBoxCss","display","SignUpBoxCss","padding","SingInArea","react_default","a","createElement","lib","store","className","es","style","size","id","type","label","lineDirection","placeholder","value","onChange","errorText","onClick","maxLength","Component","ProfileSettings","reauthenticate","currentPassword","cred","EmailAuthProvider","credential","reauthenticateWithCredential","reauthenticateForDelete","currentPasswordForDelete","verifyemail","sendEmailVerification","success","err","show","visible","hidebox","currentPasswordForDeleteError","currentPasswordForDeleteErrorText","confirm","remove","delete","handlecurrentPassword","currentPasswordVal","handlenewUserPassword","newUserPasswordVal","newUserPassword","handlecurrentPasswordForDelete","currentPasswordForDeleteVal","userName","newUserName","newUserImgUrl","emailVerified","emailVerifiedIcon","emailVerifiedTittle","buttonVerifycheck","newPasswordErrorForTextFiel","newPasswordErrorTextForTextFiel","currentPasswordErrorTextForTextFiel","currentPasswordErrorForTextFiel","users","currentUser","handleSpanSetting","handleNewUserName","handleNewUserImgUrl","saveChanges","previusUsers","on","snap","push","key","val","i","length","splice","name","props","newUserNameVal","newUserImgVal","updatePassword","setTimeout","window","location","reload","ewPasswordErrorForTextFiel","update","actions","secondary","children","flat","primary","divid","floating","src","role","IconBackgroundColor","title","raised","swapTheming","disabled","onHide","PostsBox","handleDeleteBtn","handleImgError","imgUrl","imgTittle","UserIcon","messageInput","onError","AllTheUsers","InSideHomePage","newimgUrl","handleMessageInput","messageInputVal","handleShare","messageInputError","messageInputErrorText","firebaseDatabase","userId","handleAddPhotoGif","visibleImgGif","showBoxImg","hideBoxImg","hideAndShare","posts","userPosts","handlenewimgUrl","handleIconClicked","previusPosts","newimgUrlVal","actionsForBoxImg","rows","focusOnMount","containFocus","contentClassName","imgTittleValue","imgUrlValue","map","post","home_postsBox","reverse","home_allTheUsers","Navbar","handleSettings","handleLogout","random","_ref","simplifiedMenu","concat","menuItems","divider","anchor","x","DropdownMenu","HorizontalAnchors","CENTER","y","VerticalAnchors","OVERLAP","position","Positions","TOP_RIGHT","animationPosition","sameWidth","component","IconSeparator","iconBefore","Homepage","loadingDash","showSettings","dataLoadingDash","signOut","react_loader_spinner_default","color","height","width","dashboard_profilesettings","themed","nav","navbar","home_insideHome","App","loading","loggedin","data","handleLoggedIn","handleNotLoggedIn","firebaseUser","checkloggedin","homepage","userSignIn","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.80c05edb.chunk.js","sourcesContent":["import firebase from 'firebase'\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBZgL1gKHAcaY-4Y4PGCNfnssztb8IarZU\",\r\n    authDomain: \"moviewebsite-b7ffe.firebaseapp.com\",\r\n    databaseURL: \"https://moviewebsite-b7ffe.firebaseio.com\",\r\n    projectId: \"moviewebsite-b7ffe\",\r\n    storageBucket: \"moviewebsite-b7ffe.appspot.com\",\r\n    messagingSenderId: \"348587192024\",\r\n    appId: \"1:348587192024:web:f4e99bc6e3346a78\"\r\n  };\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig)\r\n\r\n\r\nexport default firebaseApp;","import React ,{Component}from 'react'\r\nimport { Grid, Cell, TextField} from 'react-md'\r\nimport firebaseApp from '../firebase/config'\r\nimport {ToastsContainer, ToastsStore} from 'react-toasts';\r\nimport './userSign.css'\r\n\r\nclass UserSignin extends Component{\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            Signup:'',\r\n            Signin:'none',\r\n            SinginEmail:\"\",\r\n            SinginPassword:\"\",\r\n            SingupUser:\"\",\r\n            SingupEmail:\"\",\r\n            SingupPassword:\"\",\r\n            SignUpAreaStyle:\"15%\",\r\n            SignInAreaStyle:'19.5%',\r\n            ErrorTextOfSignUpPassowrd:\"\",\r\n            ErrorTextOfSignUpUserName:'',\r\n            ErrorTextOfSignUpEmail:'',\r\n            ErrorTextOfSignInPassowrd:'',\r\n            ErrorTextOfSignInEmail:'',\r\n            HandleErrorTextOfSignUpPassowrd:false,\r\n            HandleErrorTextOfSignUpUserName:false,\r\n            HandleErrorTextOfSignUpPassowrd:false,\r\n            HandleErrorTextOfSignInPassword:false,\r\n            HandleErrorTextOfSignInEmail:false,\r\n        }\r\n\r\n        // this is used to get the auth from firebase config\r\n        \r\n        this.auth = firebaseApp.auth()\r\n\r\n        //this handles users database\r\n        this.firebaseDatabseUsers = firebaseApp.database().ref().child('Users')\r\n\r\n        // all of this is used just to debug some functions\r\n\r\n        this.handleSignInChanges = this.handleSignInChanges.bind(this)\r\n        this.handleSignUpChanges = this.handleSignUpChanges.bind(this)\r\n        this.handleSinginEmail = this.handleSinginEmail.bind(this)\r\n        this.handleSinginPassword = this.handleSinginPassword.bind(this)\r\n        this.handleSingupEmail = this.handleSingupEmail.bind(this)\r\n        this.handleSingupPassword = this.handleSingupPassword.bind(this)\r\n        this.handleSingupUser = this.handleSingupUser.bind(this)\r\n        this.handleSignIn = this.handleSignIn.bind(this)\r\n        this.handleSignUP = this.handleSignUP.bind(this)\r\n    }\r\n\r\n    componentDidMount(){\r\n\r\n        // this will check wich user is logged in and will update userdisplay name with the value from input box\r\n\r\n        this.auth.onAuthStateChanged((user) =>{\r\n            if (user) {\r\n              user.updateProfile({\r\n\r\n                // this will update user displayName and photo\r\n\r\n                displayName: this.state.SingupUser,\r\n                photoURL: \"\",\r\n\r\n              }).then(() => {\r\n                \r\n                // this will reset Sign up user value\r\n                this.firebaseDatabseUsers.child(user.uid).set({ \r\n                    userID: user.uid,\r\n                    userIconFirstLetter:this.state.SingupUser.toString().charAt(0).toUpperCase(),\r\n                    userEmail:this.state.SingupEmail,\r\n                    usnerName:this.state.SingupUser,\r\n                    userImgUrl:false,\r\n                })\r\n                this.setState({\r\n                    SingupUser:\"\"\r\n                })\r\n\r\n              }).catch( \r\n\r\n                // this will be alerted when an err happen\r\n\r\n                e => ToastsStore.error(e.message)\r\n              );     \r\n\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    handleSignInChanges(){\r\n        this.setState({\r\n\r\n            // this will reset state and hide Sign up box\r\n\r\n            Signup:'none',\r\n            Signin:'',\r\n            SinginEmail:\"\",\r\n            SinginPassword:\"\",\r\n            SingupUser:\"\",\r\n            SingupEmail:\"\",\r\n            SingupPassword:\"\",\r\n            SignUpAreaStyle:\"15%\",\r\n            SignInAreaStyle:'19.5%',\r\n            ErrorTextOfSignUpPassowrd:\"\",\r\n            ErrorTextOfSignUpUserName:'',\r\n            ErrorTextOfSignUpEmail:'',\r\n            ErrorTextOfSignInPassowrd:'',\r\n            ErrorTextOfSignInEmail:'',\r\n            HandleErrorTextOfSignUpPassowrd:false,\r\n            HandleErrorTextOfSignUpUserName:false,\r\n            HandleErrorTextOfSignUpPassowrd:false,\r\n            HandleErrorTextOfSignInPassword:false,\r\n            HandleErrorTextOfSignInEmail:false,\r\n        })\r\n    }\r\n\r\n    handleSignUpChanges(){\r\n\r\n        // this will reset state and hide Sign in box\r\n\r\n        this.setState({\r\n            Signup:'',\r\n            Signin:'none',\r\n            SinginEmail:\"\",\r\n            SinginPassword:\"\",\r\n            SingupUser:\"\",\r\n            SingupEmail:\"\",\r\n            SingupPassword:\"\",\r\n            SignUpAreaStyle:\"15%\",\r\n            SignInAreaStyle:'19.5%',\r\n            ErrorTextOfSignUpPassowrd:\"\",\r\n            ErrorTextOfSignUpUserName:'',\r\n            ErrorTextOfSignUpEmail:'',\r\n            ErrorTextOfSignInPassowrd:'',\r\n            ErrorTextOfSignInEmail:'',\r\n            HandleErrorTextOfSignUpPassowrd:false,\r\n            HandleErrorTextOfSignUpUserName:false,\r\n            HandleErrorTextOfSignUpPassowrd:false,\r\n            HandleErrorTextOfSignInPassword:false,\r\n            HandleErrorTextOfSignInEmail:false,\r\n        })\r\n    }\r\n\r\n    handleSinginEmail(emailValue){\r\n\r\n        //this will update state with email value with Sign in method\r\n\r\n        this.setState({\r\n            SinginEmail: emailValue\r\n        })\r\n    }\r\n\r\n    handleSinginPassword(passwordValue){\r\n\r\n        //this will update state with password value with Sign in method\r\n\r\n        this.setState({\r\n            SinginPassword: passwordValue\r\n        })\r\n    }\r\n\r\n    handleSingupEmail(emailValue){\r\n\r\n        // this will update state with email value in Sign up method\r\n\r\n        this.setState({\r\n            SingupEmail: emailValue\r\n        })\r\n    }\r\n\r\n    handleSingupPassword(passwordValue){\r\n\r\n        // this will update state with password value in sign up method\r\n\r\n        this.setState({\r\n            SingupPassword : passwordValue\r\n        })\r\n    }\r\n\r\n    handleSingupUser (userValue){\r\n        const newUserVal = userValue.slice(0, 15);\r\n        this.setState({\r\n            SingupUser: newUserVal\r\n        })\r\n    }\r\n\r\n\r\n    handleSignIn(){\r\n        this.email = this.state.SinginEmail\r\n        this.password = this.state.SinginPassword\r\n\r\n        const SignInPassowrdErrMsg = 'There is an error occurred in Password input box.Try to check what is wrong'\r\n        const SignInEmailErrMsg = 'There is an error occurred in Email input box.Try to check what is wrong'\r\n\r\n        if(this.email===\"\" && this.password===\"\"){\r\n\r\n            //This checks if the email and password are inserted correctly.If not an err will be sent\r\n\r\n            ToastsStore.error('You need to fill the input box to get SignIn')\r\n\r\n            this.setState({\r\n                HandleErrorTextOfSignInEmail:true,\r\n                HandleErrorTextOfSignInPassword:true,\r\n                ErrorTextOfSignInEmail:SignInEmailErrMsg,\r\n                ErrorTextOfSignInPassowrd:SignInPassowrdErrMsg,\r\n                SignInAreaStyle:'14%',\r\n            })\r\n        }else if(this.email===\"\"){\r\n\r\n            //This checks if the email is inserted correctly.If not an err will be sent\r\n\r\n            ToastsStore.error('You need to fill the input box to get SignIn')\r\n\r\n            this.setState({\r\n                HandleErrorTextOfSignInEmail:true,\r\n                HandleErrorTextOfSignInPassword:false,\r\n                ErrorTextOfSignInEmail:SignInEmailErrMsg,\r\n                ErrorTextOfSignInPassowrd:\"\",\r\n                SignInAreaStyle:'16.5%',\r\n            })\r\n        }else if(this.password===\"\"){\r\n\r\n            //This checks if the password are inserted correctly.If not an err will be sent\r\n\r\n            ToastsStore.error('You need to fill the input box to get SignIn')\r\n\r\n            this.setState({\r\n                HandleErrorTextOfSignInEmail:false,\r\n                HandleErrorTextOfSignInPassword:true,\r\n                ErrorTextOfSignInEmail:\"\",\r\n                ErrorTextOfSignInPassowrd:SignInPassowrdErrMsg,\r\n                SignInAreaStyle:'16.5%',\r\n            })\r\n        }else{\r\n\r\n            \r\n            const promise = this.auth.signInWithEmailAndPassword(this.email,this.password)\r\n            promise.catch(e => ToastsStore.error(e.message))\r\n\r\n            promise.catch(e => {\r\n                //This checks if The email address is badly formatted.If it is an err will be sent\r\n\r\n            if(e.message === \"The email address is badly formatted.\"){\r\n                this.setState({\r\n                    HandleErrorTextOfSignInEmail:true,\r\n                    HandleErrorTextOfSignInPassword:false,\r\n                    ErrorTextOfSignInEmail:\"The email address is badly formatted.\",\r\n                    ErrorTextOfSignInPassowrd:\"\",\r\n                    SignInAreaStyle:'17.5%',\r\n                })\r\n            }\r\n            \r\n            //this checks if There is no user record corresponding to this identifier.If it is an err will be sent\r\n\r\n            else if(e.message ===\"There is no user record corresponding to this identifier. The user may have been deleted.\"){\r\n                this.setState({\r\n                    HandleErrorTextOfSignInEmail:true,\r\n                    HandleErrorTextOfSignInPassword:true,\r\n                    ErrorTextOfSignInEmail:\"There is no user record corresponding to this identifier. The user may have been deleted.\",\r\n                    ErrorTextOfSignInPassowrd:\"There is no user record corresponding to this identifier. The user may have been deleted.\",\r\n                    SignInAreaStyle:'13.5%',\r\n                })\r\n            }\r\n\r\n            //this checks if The password is invalid or the user does not have a password.if it is an err will be sent\r\n\r\n            else if(e.message ===\"The password is invalid or the user does not have a password.\"){\r\n                this.setState({\r\n                    HandleErrorTextOfSignInEmail:true,\r\n                    HandleErrorTextOfSignInPassword:true,\r\n                    ErrorTextOfSignInEmail:\"The password is invalid or the user does not have a password.\",\r\n                    ErrorTextOfSignInPassowrd:\"The password is invalid or the user does not have a password.\",\r\n                    SignInAreaStyle:'14%',\r\n                })\r\n            }\r\n        })\r\n\r\n        //this there is no err found.User will Log In Successfully\r\n\r\n            if(promise.catch() === -1){\r\n                this.setState({\r\n                    SinginEmail:\"\",\r\n                    SinginPassword:\"\",\r\n                })   \r\n            }\r\n        }\r\n        \r\n    }\r\n\r\n\r\n    handleSignUP(){\r\n\r\n        this.email = this.state.SingupEmail\r\n        this.password = this.state.SingupPassword\r\n        this.username = this.state.SingupUser\r\n\r\n        const SignUpPassowrdErrMsg = 'There is an error occurred in Password input box.Try to check what is wrong'\r\n        const SignUpEmailErrMsg = 'There is an error occurred in Email input box.Try to check what is wrong'\r\n        const SignUpUserNameErrMsg = 'There is an error occurred in UserName input box.Try to check what is wrong'\r\n\r\n        if(this.email===\"\" && this.password===\"\"&& this.username===\"\"){\r\n\r\n        //This checks if the password and email and username were correctly validated before storing in the database.If not sends err\r\n            \r\n            ToastsStore.error('You need to fill the input box to get SignUp')\r\n\r\n            this.setState({\r\n                HandleErrorTextOfSignUpPassowrd:true,\r\n                HandleErrorTextOfSignUpUserName:true,\r\n                HandleErrorTextOfSignUpEmail:true,\r\n                ErrorTextOfSignUpPassowrd:SignUpPassowrdErrMsg,\r\n                ErrorTextOfSignUpUserName:SignUpUserNameErrMsg,\r\n                ErrorTextOfSignUpEmail:SignUpEmailErrMsg,\r\n                SignUpAreaStyle:\"8%\",\r\n            })\r\n        }\r\n        \r\n        else if(this.password===\"\" && this.username===\"\"){\r\n\r\n        //This checks if the password and username were correctly validated before storing in the database.If not sends err\r\n            \r\n            ToastsStore.error('You need to fill the input box to get SignUp')\r\n\r\n            this.setState({\r\n                HandleErrorTextOfSignUpPassowrd:true,\r\n                HandleErrorTextOfSignUpUserName:true,\r\n                HandleErrorTextOfSignUpEmail:false,\r\n                ErrorTextOfSignUpPassowrd:SignUpPassowrdErrMsg,\r\n                ErrorTextOfSignUpUserName:SignUpUserNameErrMsg,\r\n                ErrorTextOfSignUpEmail:\"\",\r\n                SignUpAreaStyle:\"11%\",\r\n            })\r\n        }\r\n\r\n        else if(this.email===\"\" && this.username===\"\"){\r\n\r\n            //This checks if the email and username were correctly validated before storing in the database.If not sends err\r\n            \r\n            ToastsStore.error('You need to fill the input box to get SignUp')\r\n            this.setState({\r\n                HandleErrorTextOfSignUpPassowrd:false,\r\n                HandleErrorTextOfSignUpUserName:true,\r\n                HandleErrorTextOfSignUpEmail:true,\r\n                ErrorTextOfSignUpPassowrd:\"\",\r\n                ErrorTextOfSignUpUserName:SignUpUserNameErrMsg,\r\n                ErrorTextOfSignUpEmail:SignUpEmailErrMsg,\r\n                SignUpAreaStyle:\"11%\",\r\n            })\r\n        }\r\n\r\n        else if(this.password===\"\" && this.email===\"\"){\r\n\r\n            //This checks if the  email and password were correctly validated before storing in the database.If not sends err\r\n\r\n            ToastsStore.error('You need to fill the input box to get SignUp')\r\n            this.setState({\r\n                HandleErrorTextOfSignUpPassowrd:true,\r\n                HandleErrorTextOfSignUpUserName:false,\r\n                HandleErrorTextOfSignUpEmail:true,\r\n                ErrorTextOfSignUpPassowrd:SignUpPassowrdErrMsg,\r\n                ErrorTextOfSignUpUserName:\"\",\r\n                ErrorTextOfSignUpEmail:SignUpEmailErrMsg,\r\n                SignUpAreaStyle:\"11%\",\r\n            })\r\n        }\r\n\r\n        else if(this.password===\"\"){\r\n\r\n            //This checks if the password was correctly validated before storing in the database.If not sends err\r\n\r\n            ToastsStore.error('You need to fill the input box to get SignUp')\r\n            this.setState({\r\n                HandleErrorTextOfSignUpPassowrd:true,\r\n                HandleErrorTextOfSignUpUserName:false,\r\n                HandleErrorTextOfSignUpEmail:false,\r\n                ErrorTextOfSignUpPassowrd:SignUpPassowrdErrMsg,\r\n                ErrorTextOfSignUpUserName:\"\",\r\n                ErrorTextOfSignUpEmail:\"\",\r\n                SignUpAreaStyle:\"13%\",\r\n            })\r\n        }\r\n\r\n        else if(this.email===\"\"){\r\n\r\n            //This checks if the email was correctly validated before storing in the database.If not sends err\r\n\r\n            ToastsStore.error('You need to fill the input box to get SignUp')\r\n            this.setState({\r\n                HandleErrorTextOfSignUpPassowrd:false,\r\n                HandleErrorTextOfSignUpUserName:false,\r\n                HandleErrorTextOfSignUpEmail:true,\r\n                ErrorTextOfSignUpPassowrd:\"\",\r\n                ErrorTextOfSignUpUserName:\"\",\r\n                ErrorTextOfSignUpEmail:SignUpEmailErrMsg,\r\n                SignUpAreaStyle:\"13%\",\r\n            })\r\n        }\r\n\r\n        else if(this.username===\"\"){\r\n\r\n            //This checks if the username was correctly validated before storing in the database.If not sends err\r\n\r\n            ToastsStore.error('You need to fill the input box to get SignUp')\r\n            this.setState({\r\n                HandleErrorTextOfSignUpPassowrd:false,\r\n                HandleErrorTextOfSignUpUserName:true,\r\n                HandleErrorTextOfSignUpEmail:false,\r\n                ErrorTextOfSignUpPassowrd:\"\",\r\n                ErrorTextOfSignUpUserName:SignUpUserNameErrMsg,\r\n                ErrorTextOfSignUpEmail:\"\",\r\n                SignUpAreaStyle:\"13%\",\r\n            })\r\n        }else{\r\n\r\n            const promise = this.auth.createUserWithEmailAndPassword(this.email,this.password)\r\n            promise.catch(e => ToastsStore.error(e.message))\r\n            promise.catch(e => {\r\n                //this checks if the email address is badly formatted.\r\n                if(e.message === 'The email address is badly formatted.'){\r\n                this.setState({\r\n                    HandleErrorTextOfSignUpPassowrd:false,\r\n                    HandleErrorTextOfSignUpUserName:false,\r\n                    HandleErrorTextOfSignUpEmail:true,\r\n                    ErrorTextOfSignUpPassowrd:\"\",\r\n                    ErrorTextOfSignUpUserName:\"\",\r\n                    ErrorTextOfSignUpEmail:'The email address is badly formatted.',\r\n                    SignUpAreaStyle:\"14%\",\r\n                })\r\n            }\r\n            //this checks if The email address is already in use by another account.\r\n            else if(e.message === 'The email address is already in use by another account.'){\r\n                this.setState({\r\n                    HandleErrorTextOfSignUpPassowrd:false,\r\n                    HandleErrorTextOfSignUpUserName:false,\r\n                    HandleErrorTextOfSignUpEmail:true,\r\n                    ErrorTextOfSignUpPassowrd:\"\",\r\n                    ErrorTextOfSignUpUserName:\"\",\r\n                    ErrorTextOfSignUpEmail:'The email address is already in use by another account.',\r\n                    SignUpAreaStyle:\"14%\",\r\n                })\r\n            }\r\n            //this checks if Password should be at least 6 characters\r\n            else if(e.message === 'Password should be at least 6 characters'){\r\n                this.setState({\r\n                    HandleErrorTextOfSignUpPassowrd:true,\r\n                    HandleErrorTextOfSignUpUserName:false,\r\n                    HandleErrorTextOfSignUpEmail:false,\r\n                    ErrorTextOfSignUpPassowrd:\"Password should be at least 6 characters\",\r\n                    ErrorTextOfSignUpUserName:\"\",\r\n                    ErrorTextOfSignUpEmail:'',\r\n                    SignUpAreaStyle:\"14%\",\r\n                })\r\n            }\r\n        })\r\n  \r\n            //this there is no err found.User will Log In Successfully\r\n\r\n            if(promise.catch() === -1){\r\n                this.setState({\r\n                        SingupEmail:\"\",\r\n                        SingupPassword:\"\",\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const SignInBoxCss ={\r\n            display: this.state.Signup\r\n        }\r\n        const SignUpBoxCss ={\r\n            display: this.state.Signin\r\n        }\r\n        const SignUpAreaStyle={\r\n            padding: this.state.SignUpAreaStyle\r\n        }\r\n        const SingInArea ={\r\n            padding: this.state.SignInAreaStyle\r\n        }\r\n        return(\r\n            <div>\r\n                <ToastsContainer store={ToastsStore} className=\"ToasterLeftTopSide\"/>\r\n                \r\n                <Grid className='UserSigninBox' style={SignInBoxCss}>\r\n                    <Cell size={8}>\r\n                        <div style={SingInArea}>\r\n                            <h2>Sign in To The Site</h2>\r\n                            <TextField\r\n                                id=\"floating-center-title\"\r\n                                type=\"email\"\r\n                                label=\"Email\"\r\n                                lineDirection=\"center\"\r\n                                placeholder=\"Enter your email...\"\r\n                                value={this.state.SinginEmail}\r\n                                onChange={this.handleSinginEmail}\r\n                                className=\"md-cell md-cell--bottom inputfill\"\r\n                                error={this.state.HandleErrorTextOfSignInEmail}\r\n                                errorText={this.state.ErrorTextOfSignInEmail}\r\n                            />\r\n                            <TextField\r\n                                id=\"floating-password\"\r\n                                type=\"password\"\r\n                                label=\"Password\"\r\n                                lineDirection=\"center\"\r\n                                placeholder=\"Enter your password...\"\r\n                                value={this.state.SinginPassword}\r\n                                onChange={this.handleSinginPassword}\r\n                                className=\"md-cell md-cell--bottom inputfill\"\r\n                                error={this.state.HandleErrorTextOfSignInPassword}\r\n                                errorText={this.state.ErrorTextOfSignInPassowrd}\r\n                            />\r\n                            <br/><br/>\r\n                            <button className=\"Submitebutton\" onClick={this.handleSignIn}>SIGN IN</button>\r\n                        </div>\r\n                    </Cell>\r\n                    <Cell size={4} className='SingInTextArea' >\r\n                            <div className=\"SignText\">\r\n                                <h3>Welcome back!</h3>\r\n                                <br/>\r\n                                <p>this website is just for testing so dont enter any of your persinal details please</p>\r\n                                <br/>\r\n                                <button className='SignUpbutton' onClick={this.handleSignInChanges}>SIGN UP</button>\r\n                            </div>\r\n                    </Cell>\r\n                </Grid>\r\n\r\n                <Grid className='UserSignUpBox' style={SignUpBoxCss}>\r\n                    <Cell size={4} className='SingInTextArea' >\r\n                            <div className=\"SignText\">\r\n                                <h3>Hello Friend!</h3>\r\n                                <br/>\r\n                                <p>this website doesn't secure any kind of password or persinal infos.It saves date in plane text so please don't integrate your persinal infos here</p>\r\n                                <br/>\r\n                                <button className='SignUpbutton' onClick={this.handleSignUpChanges}>SIGN IN</button>\r\n                            </div>\r\n                    </Cell>\r\n                    <Cell size={8}>\r\n                        <div style={SignUpAreaStyle}>\r\n                            <h2>Create Account</h2>\r\n                            <TextField\r\n                                id=\"floating-center-title userNameBox\"\r\n                                label=\"UserName\"\r\n                                lineDirection=\"center\"\r\n                                placeholder=\"Enter your username...\"\r\n                                value={this.state.SingupUser}\r\n                                onChange={this.handleSingupUser}\r\n                                className=\"md-cell md-cell--bottom inputfill\"\r\n                                error={this.state.HandleErrorTextOfSignUpUserName}\r\n                                errorText={this.state.ErrorTextOfSignUpUserName}\r\n                                maxLength='15'\r\n                            />\r\n                            <TextField\r\n                                id=\"floating-center-title\"\r\n                                type=\"email\"\r\n                                label=\"Email\"\r\n                                lineDirection=\"center\"\r\n                                placeholder=\"Enter your email...\"\r\n                                value={this.state.SingupEmail}\r\n                                onChange={this.handleSingupEmail}\r\n                                className=\"md-cell md-cell--bottom inputfill\"\r\n                                error={this.state.HandleErrorTextOfSignUpEmail}\r\n                                errorText={this.state.ErrorTextOfSignUpEmail}\r\n                            />\r\n                            <TextField\r\n                                id=\"floating-center-password\"\r\n                                type=\"password\"\r\n                                label=\"Password\"\r\n                                lineDirection=\"center\"\r\n                                placeholder=\"Enter your password...\"\r\n                                value={this.state.SingupPassword}\r\n                                onChange={this.handleSingupPassword}\r\n                                className=\"md-cell md-cell--bottom inputfill\"\r\n                                error={this.state.HandleErrorTextOfSignUpPassowrd}\r\n                                errorText={this.state.ErrorTextOfSignUpPassowrd}\r\n                            />\r\n                            <br/><br/>\r\n                            <button className=\"Submitebutton\" onClick={this.handleSignUP}>SIGN UP</button>\r\n                        </div>\r\n                    </Cell>\r\n                </Grid>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default UserSignin ","import React ,{Component}from 'react'\r\nimport {Avatar, Button, FontIcon, TextField, DialogContainer} from 'react-md';\r\nimport {ToastsContainer, ToastsStore} from 'react-toasts';\r\nimport firebaseApp from '../firebase/config'\r\nimport firebase from 'firebase'\r\nimport './profilesettings.css'\r\n\r\nclass ProfileSettings extends Component {\r\n\r\n    constructor(){\r\n        super()\r\n\r\n        // Some of this states are used to manage user details and others  input box details\r\n\r\n        this.state={\r\n            userEmail:'',\r\n            userImgUrl:'',\r\n            userName:\"\",\r\n            newUserName:\"\",\r\n            userIconFirstLetter:'',\r\n            newUserImgUrl:\"\",\r\n            emailVerified:'',\r\n            currentPassword:'',\r\n            newUserPassword:'',\r\n            currentPasswordForDelete:'',\r\n            visible: false,\r\n            currentPasswordForDeleteError:false,\r\n            currentPasswordForDeleteErrorText:'',\r\n            emailVerifiedIcon:'',\r\n            emailVerifiedTittle:'',\r\n            buttonVerifycheck:true,\r\n            newPasswordErrorForTextFiel:false,\r\n            newPasswordErrorTextForTextFiel:'',\r\n            currentPasswordErrorTextForTextFiel:'',\r\n            currentPasswordErrorForTextFiel:false,\r\n            users:[],\r\n        }\r\n\r\n        //this helps to get firebase auth called\r\n        this.auth = firebaseApp.auth()\r\n\r\n        this.firebaseDatabseUsers = firebaseApp.database().ref().child('Users')\r\n        //this checks current user\r\n        this.user = firebaseApp.auth().currentUser\r\n\r\n        //this helps debugging some functions\r\n        this.handleSpanSetting = this.handleSpanSetting.bind(this)\r\n        this.handleNewUserName = this.handleNewUserName.bind(this)\r\n        this.handleNewUserImgUrl = this.handleNewUserImgUrl.bind(this)\r\n        this.saveChanges = this.saveChanges.bind(this)\r\n    }\r\n\r\n    componentWillMount(){\r\n        const previusUsers = this.state.users\r\n\r\n        this.firebaseDatabseUsers.on('child_added', snap => {\r\n            previusUsers.push({\r\n                id: snap.key,\r\n                userID: snap.val().userID,\r\n                userIconFirstLetter: snap.val().userIconFirstLetter,\r\n                userImgUrl: snap.val().userImgUrl,\r\n                usnerName: snap.val().usnerName,\r\n                userEmail: snap.val().userEmail,\r\n            })\r\n                this.setState({\r\n                    users: previusUsers\r\n                })\r\n        })\r\n        this.firebaseDatabseUsers.on('child_removed', snap => {\r\n            for(var i=0; i< previusUsers.length; i++){\r\n                if(previusUsers[i].id === snap.key){\r\n                    previusUsers.splice(i,1)\r\n                }\r\n            }\r\n            this.setState({\r\n                users: previusUsers\r\n            })\r\n        })\r\n\r\n    }\r\n\r\n    componentDidMount(){\r\n        //this fetchs user details from database\r\n        this.name = this.user.displayName\r\n        this.email = this.user.email\r\n        this.uid = this.user.uid\r\n        this.emailVerified = this.user.emailVerified;\r\n        this.photoURL = this.user.photoURL\r\n        //this gets the first letter from the username to update it in user icon\r\n        this.userIconFirstLetter =  this.name.toString().charAt(0).toUpperCase()\r\n        // this updates states with all user infos\r\n        this.setState({\r\n            userEmail: this.email,\r\n            userName: this.name,\r\n            userIconFirstLetter: this.userIconFirstLetter,\r\n            userImgUrl: this.photoURL,\r\n            newUserName: this.name,\r\n            newUserImgUrl: this.photoURL,\r\n            emailVerified: this.emailVerified,\r\n          })\r\n          if(this.emailVerified === false){\r\n              //this detects if user email is verified or no if not it will post an err sign in his edit settings\r\n              this.setState({\r\n                emailVerifiedIcon:'report',\r\n                emailVerifiedTittle:'Email is not Verified',\r\n                buttonVerifycheck:false,\r\n              })\r\n          }else{\r\n            this.setState({\r\n                //this detects if user email is verified or no if not it will post a done sign in his edit settings\r\n                emailVerifiedIcon:'done',\r\n                emailVerifiedTittle:'Email is Verified',\r\n                buttonVerifycheck:true,\r\n              })\r\n          }\r\n          // Prompt the user to re-provide their sign-in credentials\r\n\r\n    }\r\n\r\n    //this passes a function called handleSpanSetting() to homepage so it can hide profile settings\r\n    handleSpanSetting(){\r\n        this.props.handleSpanSetting()\r\n    }\r\n\r\n    //this updates newUserName state with the variable that the input gives on change\r\n    handleNewUserName(newUserNameVal){\r\n        this.setState({\r\n            newUserName: newUserNameVal\r\n        })\r\n    }\r\n\r\n    //this updates newUserImgUrl state with the variable that the input gives on change\r\n    handleNewUserImgUrl(newUserImgVal){\r\n        this.setState({\r\n            newUserImgUrl: newUserImgVal\r\n        })\r\n    }\r\n\r\n\r\n    saveChanges(){\r\n\r\n            //this checks if user name input box and currentpassword is empty or not\r\n            if(this.state.newUserName !== ''  && this.state.currentPassword !== ''){\r\n                //this checks if currentpassword is not empty and new user password is empty\r\n                if(this.state.currentPassword !== '' && this.state.newUserPassword === '' ){\r\n                    //this will send an err to user\r\n                    ToastsStore.error('You need to fill the new password to change your password')\r\n                    this.setState({\r\n                        newPasswordErrorForTextFiel:true,\r\n                        newPasswordErrorTextForTextFiel:'You need to fill the new password to change your password',\r\n                        currentPasswordErrorTextForTextFiel:'',\r\n                        currentPasswordErrorForTextFiel:false,\r\n                    })\r\n                }\r\n                else{\r\n                    //this checks if currentpassword input box variable = to the user password or not\r\n                    //then it will update user password with the new one and send a sucess toaster and reload page\r\n\r\n                    this.reauthenticate(this.state.currentPassword).then(() => {\r\n                        this.user.updatePassword(this.state.newUserPassword).then(()=>{\r\n                            ToastsStore.success('Update Was Successfull.Page will Auto reload in 3 seconds to update your account details.')\r\n                        setTimeout(\r\n                            () => {\r\n                                window.location.reload();\r\n                            },4500)\r\n                        })\r\n                    }).catch((error) =>{\r\n                        ToastsStore.error(error.message)\r\n                        if(error.message === 'The password is invalid'){\r\n                            this.setState({\r\n                                ewPasswordErrorForTextFiel:true,\r\n                                newPasswordErrorTextForTextFiel:'The password that you inserted in Current Password input is invalid',\r\n                                currentPasswordErrorTextForTextFiel:'The password that you inserted in Current Password input is invalid',\r\n                                currentPasswordErrorForTextFiel:true,\r\n                            })\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n            //this checks if newUserName is changed only if it is it will update user displayName and if\r\n            // the user put a photo it will update it \r\n            else if(this.state.newUserName !== ''){\r\n                this.user.updateProfile({\r\n                    displayName: this.state.newUserName,\r\n                    photoURL: this.state.newUserImgUrl\r\n                  }).then(() =>{\r\n                      \r\n                      if(this.state.newUserImgUrl === null){\r\n                        this.firebaseDatabseUsers.child(this.user.uid).update({\r\n                            'usnerName': this.state.newUserName,\r\n                            'userImgUrl': false,\r\n                            'userIconFirstLetter': this.state.newUserName.toString().charAt(0).toUpperCase(),\r\n                        })\r\n                      }else{\r\n                        this.firebaseDatabseUsers.child(this.user.uid).update({\r\n                            'usnerName': this.state.newUserName,\r\n                            'userImgUrl': this.state.newUserImgUrl,\r\n                            'userIconFirstLetter': this.state.newUserName.toString().charAt(0).toUpperCase(),\r\n                        })\r\n                      }\r\n                    ToastsStore.success('Update Was Successfull.Page will Auto reload in 3 seconds to update your account details.')\r\n                    \r\n                    setTimeout(\r\n                        () => {\r\n                            window.location.reload();\r\n                        },4500)\r\n                  })\r\n            }else{\r\n                ToastsStore.error('UserName input needs to be filled')\r\n            }\r\n    }\r\n\r\n    //this is used just to check if currentpassword is = to the original password\r\n    reauthenticate = (currentPassword) =>{\r\n        this.cred = firebase.auth.EmailAuthProvider.credential(this.user.email, currentPassword)\r\n        return this.user.reauthenticateWithCredential(this.cred)\r\n    }\r\n\r\n    //this is used just to check if currentpassword is = to the original password\r\n    reauthenticateForDelete = (currentPasswordForDelete) =>{\r\n        this.cred = firebase.auth.EmailAuthProvider.credential(this.user.email, currentPasswordForDelete)\r\n        return this.user.reauthenticateWithCredential(this.cred)\r\n    }\r\n\r\n    //this just sends email verification to the user\r\n    verifyemail = () => {\r\n        this.user.sendEmailVerification().then(() =>{\r\n            ToastsStore.success(\"An email verification was sent to your email box\")\r\n        }).catch((err) =>{\r\n            ToastsStore.error(err.message)\r\n        })\r\n    }\r\n\r\n    //this manages the display of the delete button popup\r\n    show = () => {\r\n        this.setState({ visible: true });\r\n      };\r\n      \r\n      hidebox = () => {\r\n        this.setState({ \r\n            visible: false ,\r\n            currentPasswordForDeleteError:false,\r\n            currentPasswordForDeleteErrorText:'',\r\n            currentPasswordForDelete:'',\r\n        });\r\n      }\r\n\r\n\r\n       //this checks if currentPasswordForDelete input box variable = to the user password or not\r\n        //then it will delete the account\r\n      confirm = () => {\r\n        this.reauthenticateForDelete(this.state.currentPasswordForDelete).then(() =>{\r\n            this.firebaseDatabseUsers.child(this.user.uid).remove()\r\n            this.user.delete().then(() =>{\r\n                ToastsStore.success('Your account just got deleted.Page will Auto reload in 3 seconds to update your account details.')\r\n            }).catch((error) =>{\r\n                ToastsStore.error(error.message)\r\n              });\r\n        }).catch((err) => {\r\n        if(err.message === 'The password is invalid or the user does not have a password.'){\r\n            this.setState({\r\n                currentPasswordForDeleteError:true,\r\n                currentPasswordForDeleteErrorText:'The password is incorrect.',\r\n            })\r\n        }\r\n        })\r\n      }\r\n\r\n\r\n      //this manages the currentPassword state by updating it with currentPasswordVal value\r\n      handlecurrentPassword = (currentPasswordVal) =>{\r\n        this.setState({\r\n            currentPassword: currentPasswordVal\r\n        })\r\n      }\r\n\r\n      //this manages the newUserPassword state by updating it with newUserPasswordVal value\r\n      handlenewUserPassword = (newUserPasswordVal) =>{\r\n        this.setState({\r\n            newUserPassword: newUserPasswordVal\r\n        })\r\n      }\r\n\r\n      //this manages the currentPasswordForDelete state by updating it with currentPasswordForDeleteVal value\r\n      handlecurrentPasswordForDelete = (currentPasswordForDeleteVal) =>{\r\n        this.setState({\r\n            currentPasswordForDelete: currentPasswordForDeleteVal\r\n        })\r\n      }\r\n\r\n    render(){\r\n\r\n        //this is take from the library 'react-md' it just handles wat is inside of action array\r\n        const actions = [];\r\n            actions.push({ secondary: true, children: 'Cancel', onClick: this.hidebox });\r\n            actions.push(<Button flat primary onClick={this.confirm}>Confirm</Button>);\r\n\r\n        const divid = this.props.divid\r\n\r\n        //this gets user icon\r\n        const UserIcon = e =>{\r\n            if(this.state.userImgUrl === null){\r\n                \r\n                return(<Avatar className=\"UserIconSettings\">{this.state.userIconFirstLetter}</Avatar>)\r\n            }else{\r\n                return(<Avatar src={this.state.userImgUrl} role=\"presentation\" className=\"UserIconSettings\"/>)\r\n            }\r\n        };\r\n\r\n        return(\r\n        <div>\r\n            <ToastsContainer store={ToastsStore} className=\"ToasterLeftTopSide\"/>\r\n            <div className=\"modal\" id={divid}>\r\n                <div className=\"modal-content\">\r\n                        <div className=\"modal-header\">\r\n\r\n                        <span className=\"close\" onClick={this.handleSpanSetting}>\r\n                            <Button floating>close</Button>\r\n                        </span>\r\n                        \r\n                        <br/>\r\n                        <center><h2>Edit Profile</h2></center>\r\n                        </div>\r\n                        <div className=\"modal-body\">\r\n\r\n                            <center>\r\n                                <div>\r\n                                        <UserIcon IconBackgroundColor={this.state.IconBackgroundColor}/>\r\n                                </div>\r\n                                <div className=\"divOfEmail\">\r\n                                    <div>{this.state.userEmail}</div>\r\n                                    <div className='divOfEmailVerf'><FontIcon title={this.state.emailVerifiedTittle}>{this.state.emailVerifiedIcon}</FontIcon></div>\r\n                                </div>\r\n                            </center>\r\n\r\n                        <br/>\r\n\r\n                            <hr/>\r\n                            <TextField\r\n                                id=\"floating-center-title\"\r\n                                label=\"UserName\"\r\n                                lineDirection=\"center\"\r\n                                value={this.state.newUserName}\r\n                                onChange={this.handleNewUserName}\r\n                                className=\"md-cell md-cell--bottom inputbox\"\r\n                            />\r\n                            <TextField\r\n                                id=\"floating-center-title\"\r\n                                label=\"User Image Url\"\r\n                                lineDirection=\"center\"\r\n                                value={this.state.newUserImgUrl}\r\n                                onChange={this.handleNewUserImgUrl}\r\n                                className=\"md-cell md-cell--bottom inputbox\"\r\n                            />\r\n\r\n                            <TextField\r\n                                id=\"floating-center-title\"\r\n                                type='password'\r\n                                label=\"Current Password\"\r\n                                lineDirection=\"center\"\r\n                                value={this.state.currentPassword}\r\n                                onChange={this.handlecurrentPassword}\r\n                                className=\"md-cell md-cell--bottom inputbox\"\r\n                                error={this.state.currentPasswordErrorForTextFiel}\r\n                                errorText={this.state.currentPasswordErrorTextForTextFiel}\r\n                            />\r\n\r\n                            <TextField\r\n                                id=\"floating-center-title\"\r\n                                type='password'\r\n                                label=\"New Password\"\r\n                                lineDirection=\"center\"\r\n                                value={this.state.newUserPassword}\r\n                                onChange={this.handlenewUserPassword}\r\n                                className=\"md-cell md-cell--bottom inputbox\"\r\n                                error={this.state.newPasswordErrorForTextFiel}\r\n                                errorText={this.state.newPasswordErrorTextForTextFiel}\r\n                            />\r\n\r\n                            <Button raised primary swapTheming disabled={this.state.buttonVerifycheck} title={this.state.emailVerifiedTittle}\r\n                            className=\"verifyButton\" \r\n                            onClick={this.verifyemail}>Verify My Email</Button>\r\n\r\n                            <div className=\"DivContainDeleteButton\">\r\n                            <Button raised secondary swapTheming \r\n                            className=\"DeleteButton\" \r\n                            onClick={this.show}>Delete Account</Button>\r\n                            </div>\r\n\r\n                            <DialogContainer\r\n                            id=\"simple-action-dialog\"\r\n                            visible={this.state.visible}\r\n                            onHide={this.hidebox}\r\n                            actions={actions}\r\n                            title=\"Do you readly want to delete your account?\"\r\n                            >\r\n                                <TextField\r\n                                id=\"floating-center-title\"\r\n                                type='password'\r\n                                label=\"Current Password\"\r\n                                lineDirection=\"center\"\r\n                                value={this.state.currentPasswordForDelete}\r\n                                onChange={this.handlecurrentPasswordForDelete}\r\n                                className=\"md-cell md-cell--bottom inputbox\"\r\n                                error={this.state.currentPasswordForDeleteError}\r\n                                errorText={this.state.currentPasswordForDeleteErrorText}\r\n                            />\r\n                            </DialogContainer>\r\n                        </div>\r\n\r\n                        <div className=\"modal-footer\">\r\n                            <center><Button raised primary swapTheming onClick={this.saveChanges}>Save Changes</Button></center>\r\n                        </div>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default ProfileSettings","import React , {Component}from 'react'\r\nimport { Grid, Cell ,Avatar ,FontIcon } from 'react-md'\r\nimport './postsBox.css'\r\n\r\nclass PostsBox extends Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state ={\r\n            imgUrl:this.props.imgUrl,\r\n            imgTittle:this.props.imgTittle,\r\n        }\r\n        this.id = this.props.id\r\n        this.userID = this.props.userID\r\n      }\r\n\r\n    handleDeleteBtn = (id,userID) => {\r\n        this.props.handleDeleteBtn(id,userID)\r\n    }\r\n\r\n    handleImgError = () =>{\r\n        this.setState({\r\n            imgUrl:'https://blog.thomasnet.com/hs-fs/hubfs/shutterstock_774749455.jpg?width=600&name=shutterstock_774749455.jpg',\r\n            imgTittle:\"If you are seeing this image it means that the Link that this user tried share was dead.\"\r\n        })\r\n    }\r\n    \r\n    render(){\r\n        const UserIcon = () =>{\r\n            if(this.props.userImgUrl === false){\r\n                return(<div className=\"userIconPostBox\"><Avatar>{this.props.userIconFirstLetter}</Avatar></div>)\r\n            }else{\r\n                return(<div className=\"userIconPostBox\"><Avatar src={this.props.userImgUrl} role=\"presentation\"/></div>)\r\n            }\r\n        }\r\n        \r\n        if(this.props.imgUrl === false){\r\n            return(\r\n                <div>\r\n                    <div className=\"userPostBox\">\r\n                        <Grid>\r\n                            <Cell size={3}>\r\n                                <center>\r\n                                    <UserIcon\r\n                                    userIconFirstLetter={this.userIconFirstLetter} \r\n                                    userImgUrl={this.props.userImgUrl}\r\n                                    />\r\n                                    <h6>{this.props.usnerName}</h6>\r\n                                </center>\r\n                            </Cell>\r\n                            <Cell size={8}>\r\n                                <h4 className=\"userMessage\">{this.props.messageInput}</h4>\r\n                            </Cell>\r\n                            <Cell size={1}>\r\n                                <FontIcon className=\"deleteBtn\" onClick={() => this.handleDeleteBtn(this.id,this.userID)}>close</FontIcon>\r\n                            </Cell>\r\n                        </Grid>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }else{\r\n            return(\r\n                <div>\r\n                    <div className=\"userPostBox\">\r\n                        <Grid>\r\n                            <Cell size={3}>\r\n                                <center>\r\n                                    <UserIcon\r\n                                    userIconFirstLetter={this.props.userIconFirstLetter} \r\n                                    userImgUrl={this.props.userImgUrl}\r\n                                    />\r\n                                    <h6>{this.props.usnerName}</h6>\r\n                                </center>\r\n                            </Cell>\r\n                            <Cell size={8}>\r\n                                <center><h4>{this.state.imgTittle}</h4></center>\r\n                                <img src={this.state.imgUrl} className='userImgPost' onError={this.handleImgError}/>\r\n                            </Cell>\r\n                            <Cell size={1}>\r\n                                <FontIcon className=\"deleteBtn\" onClick={() => this.handleDeleteBtn(this.id,this.userID)}>close</FontIcon>\r\n                            </Cell>\r\n                        </Grid>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default PostsBox","import React ,{Component}from 'react'\r\nimport { Grid, Cell ,Avatar ,FontIcon } from 'react-md'\r\nimport './allTheUsers.css'\r\n\r\nclass AllTheUsers extends Component{\r\n\r\n    constructor(){\r\n        super()\r\n    }\r\n    \r\n\r\n    render(){\r\n        const UserIcon = () =>{\r\n            if(this.props.userImgUrl === false){\r\n                return(<div className=\"userIconPostBox\"><Avatar>{this.props.userIconFirstLetter}</Avatar></div>)\r\n            }else{\r\n                return(<div className=\"userIconPostBox\"><Avatar src={this.props.userImgUrl} role=\"presentation\"/></div>)\r\n            }\r\n        }\r\n\r\n        return(\r\n            <div>\r\n                    <div className=\"bodyOfAllUsers containerOfAllUsers\">\r\n                        <Grid>\r\n                            <br/>\r\n                            <Cell size={3}>\r\n                                <UserIcon/>\r\n                            </Cell>\r\n                            <Cell size={9} className=\"userNameDiv\">\r\n                                <h4>{this.props.usnerName}</h4>\r\n                            </Cell>\r\n                            <Cell size={12}>\r\n                                <h6>Email: {this.props.userEmail}</h6>\r\n                            </Cell>\r\n                            <br/>\r\n                        </Grid>\r\n                    </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AllTheUsers","import React ,{Component}from 'react'\r\nimport PostsBox from './postsBox'\r\nimport AllTheUsers from './allTheUsers'\r\nimport { Grid, Cell ,Avatar , DialogContainer , TextField, Button, FontIcon} from 'react-md'\r\nimport {ToastsContainer, ToastsStore} from 'react-toasts'\r\nimport firebaseApp from '../../firebase/config'\r\nimport './insideHome.css'\r\n\r\nclass InSideHomePage extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            visible:false,\r\n            visibleImgGif:false,\r\n            userIconFirstLetter:props.userIconFirstLetter,\r\n            userImgUrl: props.userImgUrl,\r\n            usnerName: props.usnerName,\r\n            userEmail: props.userEmail,\r\n            userId: props.userId,\r\n            newimgUrl:'',\r\n            messageInput:'',\r\n            messageInputError:false,\r\n            messageInputErrorText:\"\",\r\n            posts:[],\r\n            users:[],\r\n            userPosts:'0',\r\n            imgUrl:'',\r\n        }\r\n\r\n        this.auth = firebaseApp.auth()\r\n\r\n        this.firebaseDatabase = firebaseApp.database().ref().child('Posts')\r\n\r\n        this.firebaseDatabseUsers = firebaseApp.database().ref().child('Users')\r\n\r\n        this.user = this.auth.currentUser\r\n\r\n        this.handlenewimgUrl = this.handlenewimgUrl.bind(this)\r\n        this.handleIconClicked = this.handleIconClicked.bind(this)\r\n\r\n    }\r\n\r\n    componentWillMount(){\r\n        const previusPosts = this.state.posts\r\n\r\n        this.firebaseDatabase.on('child_added', snap => {\r\n            previusPosts.push({\r\n                id: snap.key,\r\n                userID: snap.val().userID,\r\n                userIconFirstLetter: snap.val().userIconFirstLetter,\r\n                userImgUrl: snap.val().userImgUrl,\r\n                usnerName: snap.val().usnerName,\r\n                messageInput: snap.val().messageInput,\r\n                imgUrl: snap.val().imgUrl,\r\n                imgTittle: snap.val().imgTittle,\r\n            })\r\n                this.setState({\r\n                    posts: previusPosts\r\n                })\r\n        })\r\n        this.firebaseDatabase.on('child_removed', snap => {\r\n            for(var i=0; i< previusPosts.length; i++){\r\n                if(previusPosts[i].id === snap.key){\r\n                    previusPosts.splice(i,1)\r\n                }\r\n            }\r\n            this.setState({\r\n                posts: previusPosts\r\n            })\r\n        })\r\n\r\n        const previusUsers = this.state.users\r\n\r\n        this.firebaseDatabseUsers.on('child_added', snap => {\r\n            previusUsers.push({\r\n                id: snap.key,\r\n                userID: snap.val().userID,\r\n                userIconFirstLetter: snap.val().userIconFirstLetter,\r\n                userImgUrl: snap.val().userImgUrl,\r\n                usnerName: snap.val().usnerName,\r\n                userEmail: snap.val().userEmail,\r\n            })\r\n                this.setState({\r\n                    users: previusUsers\r\n                })\r\n        })\r\n        this.firebaseDatabseUsers.on('child_removed', snap => {\r\n            for(var i=0; i< previusUsers.length; i++){\r\n                if(previusUsers[i].id === snap.key){\r\n                    previusUsers.splice(i,1)\r\n                }\r\n            }\r\n            this.setState({\r\n                users: previusUsers\r\n            })\r\n        })\r\n\r\n    }\r\n\r\n    handleIconClicked(){\r\n        this.setState({ visible: true });\r\n    }\r\n\r\n    show = () => {\r\n        this.setState({ visible: true });\r\n      };\r\n      \r\n      hidebox = () => {\r\n        this.setState({ \r\n            visible: false ,\r\n        });\r\n      }\r\n\r\n      handlenewimgUrl(newimgUrlVal){\r\n        this.setState({\r\n            newimgUrl: newimgUrlVal,\r\n        })\r\n      }\r\n\r\n      confirm = () =>{\r\n            this.user.updateProfile({\r\n                photoURL: this.state.newimgUrl\r\n              }).then(() =>{\r\n                // Update successful.\r\n                ToastsStore.success(\"Profile Image was successfuly updated.This Page will auto reload to save your details\")\r\n                setTimeout(\r\n                    () => {\r\n                        window.location.reload();\r\n                    },5000)\r\n              }).catch((error) =>{\r\n                // An error happened.\r\n                ToastsStore.error(error.message)\r\n              });\r\n      }\r\n\r\n      handleMessageInput = (messageInputVal) =>{\r\n          this.setState({\r\n              messageInput: messageInputVal\r\n          })\r\n      }\r\n\r\n      handleShare = () =>{\r\n          if(this.state.messageInput.length < 20){\r\n            ToastsStore.error('You cant share a post with less then 20 lenght.')\r\n            this.setState({\r\n                messageInputError:true,\r\n                messageInputErrorText:\"You have to fill this input Box with more then 20 letters to share your post\",\r\n            })\r\n          }else if(this.state.userImgUrl === null){\r\n            this.firebaseDatabase.push().set({ \r\n                userID: this.state.userId,\r\n                userIconFirstLetter:this.state.userIconFirstLetter,\r\n                userImgUrl:false,\r\n                imgUrl:false,\r\n                usnerName:this.state.usnerName,\r\n                messageInput:this.state.messageInput\r\n            })\r\n            this.setState({\r\n                messageInputError:false,\r\n                messageInputErrorText:\"\",\r\n                messageInput:\"\",\r\n            })\r\n          }else{\r\n            this.firebaseDatabase.push().set({ \r\n                userID: this.state.userId,\r\n                userIconFirstLetter:this.state.userIconFirstLetter,\r\n                userImgUrl:this.state.userImgUrl,\r\n                usnerName:this.state.usnerName,\r\n                messageInput:this.state.messageInput,\r\n                imgUrl:false,\r\n            })\r\n\r\n            this.setState({\r\n                messageInputError:false,\r\n                messageInputErrorText:\"\",\r\n                messageInput:\"\",\r\n            })\r\n          }\r\n        \r\n      }\r\n      handleDeleteBtn = (id,userID) => {\r\n          if(userID === this.state.userId){\r\n              this.firebaseDatabase.child(id).remove();\r\n          }else{\r\n            ToastsStore.error(\"You can't delete other users post\")\r\n          }\r\n        \r\n      }\r\n\r\n      handleAddPhotoGif=()=>{\r\n        this.setState({ \r\n            visibleImgGif: true, \r\n            imgUrl:'',\r\n            imgTittle:'',\r\n        });\r\n      }\r\n\r\n      showBoxImg = () => {\r\n        this.setState({ \r\n            visibleImgGif: true, \r\n            imgUrl:'',\r\n            imgTittle:'',\r\n        });\r\n      }\r\n    \r\n      hideBoxImg = () => {\r\n        this.setState({ \r\n            visibleImgGif: false, \r\n            imgUrl:'',\r\n            imgTittle:'',\r\n        });\r\n      }\r\n\r\n      hideAndShare = () =>{\r\n          if(this.state.userImgUrl === null){\r\n\r\n            if(this.state.imgUrl === ''){\r\n                ToastsStore.error(\"You can't share an empty image/gif url\")\r\n              }else{\r\n                this.firebaseDatabase.push().set({ \r\n                    userID: this.state.userId,\r\n                    userIconFirstLetter:this.state.userIconFirstLetter,\r\n                    userImgUrl:false,\r\n                    usnerName:this.state.usnerName,\r\n                    imgUrl:this.state.imgUrl,\r\n                    imgTittle:this.state.imgTittle,\r\n                })\r\n    \r\n                this.setState({ \r\n                    visibleImgGif: false, \r\n                    imgUrl:'',\r\n                    imgTittle:'',\r\n                });\r\n              }\r\n\r\n          }else{\r\n\r\n            if(this.state.imgUrl === ''){\r\n                ToastsStore.error(\"You can't share an empty image/gif url\")\r\n              }else{\r\n                this.firebaseDatabase.push().set({ \r\n                    userID: this.state.userId,\r\n                    userIconFirstLetter:this.state.userIconFirstLetter,\r\n                    userImgUrl:this.state.userImgUrl,\r\n                    usnerName:this.state.usnerName,\r\n                    imgUrl:this.state.imgUrl,\r\n                    imgTittle:this.state.imgTittle,\r\n                })\r\n    \r\n                this.setState({ \r\n                    visibleImgGif: false, \r\n                    imgUrl:'',\r\n                    imgTittle:'',\r\n                });\r\n              }\r\n          }\r\n          \r\n      }\r\n\r\n    render(){\r\n        const actionsForBoxImg = [{\r\n            id: 'dialog-cancel',\r\n            secondary: true,\r\n            children: 'Cancel',\r\n            onClick: this.hideBoxImg,\r\n          }, {\r\n            id: 'dialog-ok',\r\n            primary: true,\r\n            children: 'Share',\r\n            onClick: this.hideAndShare,\r\n          }];\r\n\r\n        const actions = [];\r\n            actions.push({ secondary: true, children: 'Cancel', onClick: this.hidebox });\r\n            actions.push(<Button flat primary onClick={this.confirm}>Confirm</Button>);\r\n\r\n        const UserIcon = e =>{\r\n            if(this.props.userImgUrl === null){\r\n                return(<div className=\"userIconHome\"><Avatar onClick={this.handleIconClicked}>{this.state.userIconFirstLetter}</Avatar></div>)\r\n            }else{\r\n                return(<div className=\"userIconHome\"><Avatar src={this.state.userImgUrl} role=\"presentation\" onClick={this.handleIconClicked}/></div>)\r\n            }\r\n        };\r\n\r\n        const UserPosts = () =>{\r\n            if(this.state.posts.length === 0){\r\n                return(\r\n                    <div>\r\n                        <center>\r\n                            <h4>There are no posts that has been posted by any user for now look later</h4>\r\n                        </center>\r\n                    </div>\r\n                )\r\n            }else{\r\n                return(\r\n                    <div>\r\n                        {\r\n                            this.state.posts.map((post) => {\r\n                            return (\r\n                                <PostsBox\r\n                                handleDeleteBtn={this.handleDeleteBtn}\r\n                                id={post.id}\r\n                                userIconFirstLetter={post.userIconFirstLetter}\r\n                                userImgUrl={post.userImgUrl}\r\n                                usnerName={post.usnerName}\r\n                                messageInput={post.messageInput}\r\n                                userID={post.userID}\r\n                                imgTittle={post.imgTittle}\r\n                                imgUrl={post.imgUrl}\r\n                                />\r\n                            )\r\n                            }).reverse()\r\n                        }\r\n                    </div>\r\n                )\r\n            }\r\n        }\r\n\r\n        const AllTheUsersCheck = () =>{\r\n            return(  \r\n                <div>\r\n                {\r\n                    this.state.users.map((user) => {\r\n                    return (\r\n                        <AllTheUsers\r\n                        id={user.id}\r\n                        userIconFirstLetter={user.userIconFirstLetter}\r\n                        userImgUrl={user.userImgUrl}\r\n                        usnerName={user.usnerName}\r\n                        userID={user.userID}\r\n                        userEmail={user.userEmail}\r\n                        />\r\n                    )\r\n                    }).reverse()\r\n                }\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return(\r\n            <div><ToastsContainer store={ToastsStore} className=\"ToasterLeftTopSide\"/>\r\n            <div className=\"mainDiv\">\r\n                <Grid>\r\n                    <Cell size={3}>\r\n                        <div className='userInfoDiv'>\r\n\r\n                            <div className=\"backgroundOfUserInfo\">\r\n                            </div>\r\n\r\n                            <div className=\"userInfo\">\r\n                                <Grid>\r\n                                    <Cell size={4}>\r\n\r\n                                        <UserIcon \r\n                                        userImgUrl={this.props.userImgUrl} \r\n                                        userIconFirstLetter={this.props.userIconFirstLetter}\r\n                                        />\r\n\r\n                                        <DialogContainer\r\n                                            id=\"simple-action-dialog\"\r\n                                            visible={this.state.visible}\r\n                                            onHide={this.hidebox}\r\n                                            actions={actions}\r\n                                            title=\"Do you want to change your profile image?\"\r\n                                            >\r\n                                            <TextField\r\n                                                id=\"floating-center-title\"\r\n                                                label=\"User Img url\"\r\n                                                lineDirection=\"center\"\r\n                                                value={this.state.newimgUrl}\r\n                                                onChange={this.handlenewimgUrl}\r\n                                                className=\"md-cell md-cell--bottom inputbox\"\r\n                                            />\r\n                                        </DialogContainer>\r\n\r\n                                    </Cell>\r\n                                    <Cell size={6}>\r\n                                    <h3 className='userNameInfo'>{this.state.usnerName}</h3>\r\n                                    <h6 className='userEmailInfo'>\r\n                                    {this.state.userEmail}\r\n                                    </h6>\r\n                                    </Cell>\r\n                                    <Cell size={6}>\r\n                                        <h5>Posts:</h5>\r\n                                        <span>{this.state.userPosts}</span>\r\n                                    </Cell>\r\n                                </Grid>\r\n                            </div>\r\n\r\n                        </div>\r\n                    </Cell>\r\n                    <Cell size={6}>\r\n                        <div className=\"postings\">\r\n                            <div className=\"userPosting\">\r\n                                <Grid className='gridOftextInput'>\r\n                                    <Cell size={1}><span></span></Cell>\r\n\r\n                                    <Cell size={1}>\r\n                                        <div className=\"insideHomeUserIcon\">\r\n                                            <UserIcon \r\n                                                userImgUrl={this.props.userImgUrl} \r\n                                                userIconFirstLetter={this.props.userIconFirstLetter}\r\n                                            />\r\n                                        </div>\r\n                                    </Cell>\r\n                                    <Cell size={8}>\r\n                                        <TextField\r\n                                        id=\"multiline-counter-field\"\r\n                                        label=\"What's happening\"\r\n                                        placeholder=\"Inform other users about your day\"\r\n                                        rows={4}\r\n                                        maxLength={400}\r\n                                        className=\"md-cell md-cell--bottom wordsBox\"\r\n                                        value={this.state.messageInput}\r\n                                        onChange={this.handleMessageInput}\r\n                                        error={this.state.messageInputError}\r\n                                        errorText={this.state.messageInputErrorText}\r\n                                        />\r\n                                    </Cell>\r\n                                </Grid>\r\n\r\n                                <Grid className='gridOfShareButton'>\r\n                                    <Cell size={2}><span></span></Cell>\r\n                                    <Cell size={2}>\r\n                                        <div className='imgAndGif'>\r\n                                            <center>\r\n                                                <div className='photodiv' onClick={this.handleAddPhotoGif}>\r\n                                                    <FontIcon className='photo'>add_photo_alternate</FontIcon>\r\n                                                    <h5 className='textphoto'>Photo/Gif</h5>\r\n                                                </div>\r\n                                            </center>\r\n                                                <DialogContainer\r\n                                                    id=\"focus-control-dialog\"\r\n                                                    title=\"Do you want to share an img or a gif?\"\r\n                                                    visible={this.state.visibleImgGif}\r\n                                                    actions={actionsForBoxImg}\r\n                                                    onHide={this.hideBoxImg}\r\n                                                    focusOnMount={true}\r\n                                                    containFocus={true}\r\n                                                    contentClassName=\"md-grid\"\r\n                                                    >\r\n\r\n                                                        <TextField \r\n                                                        id=\"field-1\" \r\n                                                        label=\"Img/Gif Tittle\" \r\n                                                        placeholder=\"Enter Img/Gif tittle...\" \r\n                                                        className=\"md-cell md-cell--12\" \r\n                                                        value={this.state.imgTittle} \r\n                                                        onChange={(imgTittleValue)=>{this.setState({imgTittle:imgTittleValue})}} \r\n                                                        />\r\n\r\n                                                        <TextField \r\n                                                        id=\"field-2\" \r\n                                                        label=\"Img/Gif Url\"\r\n                                                        placeholder=\"Enter Img/Gif url ...\" \r\n                                                        className=\"md-cell md-cell--12\" \r\n                                                        value={this.state.imgUrl} \r\n                                                        onChange={(imgUrlValue)=>{this.setState({imgUrl:imgUrlValue})}} \r\n                                                        />\r\n\r\n                                                </DialogContainer>\r\n                                        </div>\r\n                                    </Cell>\r\n                                    <Cell size={4}><span></span></Cell>\r\n                                    <Cell size={2}>\r\n\r\n                                    <Button raised primary swapTheming className=\"shareButton\" onClick={this.handleShare}>Share</Button>\r\n                                    </Cell>\r\n                                </Grid>\r\n                            </div>\r\n                            <div className=\"otherUsersPosting\">\r\n                                <br/>\r\n                                <center><h3>Users Posts</h3></center>\r\n                                <hr/>\r\n                                <br/>\r\n                                <UserPosts/>\r\n                                <br/>\r\n                            </div>\r\n                        </div>\r\n                    </Cell>\r\n                    <Cell size={3}>\r\n                        <div className=\"mainDivOfAllUsers\">\r\n                            <div className=\"tittleOfAllUsers\">\r\n                                <h3>AllTheUsers</h3>\r\n                            </div> \r\n                            <AllTheUsersCheck/>\r\n                        </div>\r\n                    </Cell>\r\n                </Grid>\r\n            </div>\r\n        </div> \r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default InSideHomePage","import React ,{Component} from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n    Avatar,\r\n    FontIcon,\r\n    AccessibleFakeButton,\r\n    IconSeparator,\r\n    DropdownMenu,\r\n  } from 'react-md';\r\nimport firebaseApp from '../firebase/config'\r\n\r\nclass Navbar extends Component {\r\n\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            userImgUrl:'',\r\n            userName:\"\",\r\n            userIconFirstLetter:'',\r\n        }\r\n\r\n        this.auth = firebaseApp.auth()\r\n\r\n        this.user = firebaseApp.auth().currentUser\r\n\r\n        this.handleSettings = this.handleSettings.bind(this)\r\n        this.handleLogout = this.handleLogout.bind(this)\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.auth.onAuthStateChanged((user) =>{\r\n            if (user) {\r\n                if (this.user != null) {\r\n\r\n                    //this fetchs user details from firebase\r\n                    this.name = this.user.displayName\r\n                    this.email = this.user.email\r\n                    this.uid = this.user.uid\r\n                    this.photoURL = this.user.photoURL \r\n    \r\n                    //this gets the first letter from the username to update it in user icon\r\n                    this.userIconFirstLetter =  this.name.toString().charAt(0).toUpperCase()\r\n        \r\n                    this.setState({\r\n                        userName: this.name,\r\n                        userIconFirstLetter: this.userIconFirstLetter,\r\n                        userImgUrl:this.photoURL,\r\n                      })\r\n                  }\r\n              }\r\n        })\r\n    }\r\n\r\n    handleSettings(){\r\n        this.props.handleSettings()\r\n    }\r\n\r\n    handleLogout(){\r\n        this.props.handleLogout()\r\n    }\r\n\r\n    render(){\r\n        //this handles the user icon.Firstly it check if the user got an img or no.If not it will set it to default\r\n            // it will check the user name and takes the first letter of it\r\n\r\n            const UserIcon = e =>{\r\n                if(this.state.userImgUrl === null){\r\n                    return(<Avatar random className=\"UserIconLogo\">{this.state.userIconFirstLetter}</Avatar>)\r\n                }else{\r\n                    return(<Avatar src={this.state.userImgUrl} role=\"presentation\"/>)\r\n                }\r\n            };\r\n            \r\n            //this handles the user dropdown list.It is taken from the module react-md\r\n\r\n            const AccountMenu = ({ simplifiedMenu }) => (\r\n                <div>\r\n                    <div className='UserIcon navBar'>\r\n                        <DropdownMenu\r\n                        id={`${!simplifiedMenu ? 'smart-' : ''}avatar-dropdown-menu`}\r\n                        menuItems={[\r\n                            'Preferences', \r\n                            <div \r\n                            role=\"button\" \r\n                            className=\"md-fake-btn md-pointer--hover md-fake-btn--no-outline md-list-tile md-text Hovered\" \r\n                            onClick={this.handleSettings}>Edit Profile</div>, \r\n                            { divider: true }, \r\n                            <div \r\n                            role=\"button\" \r\n                            className=\"md-fake-btn md-pointer--hover md-fake-btn--no-outline md-list-tile md-text Hovered\" \r\n                            onClick={this.handleLogout}>Log Out</div>,\r\n                        ]}\r\n                        anchor={{\r\n                            x: DropdownMenu.HorizontalAnchors.CENTER,\r\n                            y: DropdownMenu.VerticalAnchors.OVERLAP,\r\n                        }}\r\n                        position={DropdownMenu.Positions.TOP_RIGHT}\r\n                        animationPosition=\"below\"\r\n                        sameWidth\r\n                        simplifiedMenu={simplifiedMenu}\r\n                        >\r\n                        <AccessibleFakeButton\r\n                            component={IconSeparator}\r\n                            iconBefore\r\n                            label={\r\n                            <IconSeparator label={this.state.userName}>\r\n                                <FontIcon>arrow_drop_down</FontIcon>\r\n                            </IconSeparator>\r\n                            }\r\n                        >\r\n                            <UserIcon/>\r\n                        </AccessibleFakeButton>\r\n                        </DropdownMenu>\r\n                    </div>\r\n                </div>\r\n              );\r\n              \r\n              AccountMenu.propTypes = {\r\n                simplifiedMenu: PropTypes.bool,\r\n              };\r\n\r\n              //^^this handles the user dropdown list.It is taken from the module react-md^^\r\n        return(<AccountMenu className=\"md-btn--toolbar UserIcon\"/>)\r\n    }\r\n}\r\n\r\nexport default Navbar","import React ,{Component}from 'react'\r\nimport ProfileSettings from './profilesettings'\r\nimport InSideHomePage from './home/insideHome'\r\nimport Navbar from './navbar'\r\nimport {Toolbar} from 'react-md';\r\nimport firebaseApp from '../firebase/config'\r\nimport {ToastsContainer, ToastsStore} from 'react-toasts';\r\nimport Loader from 'react-loader-spinner'\r\nimport './dashboard.css'\r\n\r\n\r\nclass Homepage extends Component{\r\n\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            userImgUrl:'',\r\n            userName:\"\",\r\n            userEmail:\"\",\r\n            userIconFirstLetter:'',\r\n            loadingDash:false,\r\n            showSettings:false,\r\n        }\r\n\r\n        // this is used to get the data from firebase related to loadingDash\r\n        this.dataLoadingDash = firebaseApp.database().ref().child('loadingDash');\r\n\r\n        this.auth = firebaseApp.auth()\r\n        //this checks current user\r\n        this.user = firebaseApp.auth().currentUser\r\n\r\n        //this helps debugging some fanctions\r\n        this.handleLogout = this.handleLogout.bind(this)\r\n        this.handleSettings = this.handleSettings.bind(this)\r\n        this.handleSpanSetting = this.handleSpanSetting.bind(this)\r\n        \r\n\r\n    }\r\n\r\n    componentDidMount(){\r\n        //this is the loading screen it fetchs data from firebase and updates with the new value time out used just to make it little bit longer \r\n        \r\n        setTimeout(() => {this.dataLoadingDash.on('value' , snap => {\r\n            this.setState({\r\n            loadingDash: snap.val()\r\n            })\r\n            this.auth.onAuthStateChanged((user) =>{\r\n                if (user) {\r\n                    if (this.user != null) {\r\n    \r\n                        //this fetchs user details from firebase\r\n                        this.name = this.user.displayName\r\n                        this.email = this.user.email\r\n                        this.uid = this.user.uid\r\n                        this.photoURL = this.user.photoURL \r\n        \r\n                        //this gets the first letter from the username to update it in user icon\r\n                        this.userIconFirstLetter =  this.name.toString().charAt(0).toUpperCase()\r\n            \r\n                        this.setState({\r\n                            userName: this.name,\r\n                            userIconFirstLetter: this.userIconFirstLetter,\r\n                            userImgUrl:this.photoURL,\r\n                            userEmail:this.email,\r\n                          })\r\n                      }\r\n                  }\r\n            })\r\n          })},6000)\r\n    }\r\n    \r\n\r\n    handleSettings(){\r\n        //this handles the opening of the settings box\r\n\r\n        this.setState({\r\n            showSettings:true\r\n        })\r\n    }\r\n    handleSpanSetting(){\r\n        //this handles the closing of the settings box\r\n\r\n        this.setState({\r\n            showSettings:false\r\n        })\r\n    }\r\n\r\n    handleLogout(){\r\n        //this just signs out the user when the function is called\r\n\r\n        this.auth.signOut()\r\n    }\r\n\r\n    render(){\r\n        //this check if the web app is connected to the firebase or no if it isnt it will trigger a loading screen\r\n       \r\n        if(this.state.loadingDash === false){\r\n            // this is the loading screen\r\n\r\n            return(\r\n                    <div className='LoadingScrean'>\r\n                        <Loader type=\"Triangle\" color=\"rgb(72, 219, 138)\" height={80} width={80}/>\r\n                    </div>\r\n                );\r\n            \r\n        }\r\n        // this gets triggered when the web app coonects to the firebase\r\n\r\n        else{\r\n\r\n            // this is the setting box it gets triggered when handleSettings() gets triggered\r\n\r\n            const ProfileSettingsPopup = () => {\r\n                if(this.state.showSettings === true){\r\n                   return(\r\n                        <ProfileSettings handleSpanSetting={this.handleSpanSetting} divid=\"myModal\"/>\r\n                   );\r\n                }else{\r\n                    return(null)\r\n                }\r\n            }\r\n\r\n            return(\r\n                \r\n                <div>\r\n                    <ToastsContainer store={ToastsStore} className=\"ToasterLeftTopSide\"/>\r\n                    <ProfileSettingsPopup/>\r\n                    <Toolbar\r\n                        themed\r\n                        nav={\r\n                        <Navbar handleSettings={this.handleSettings} handleLogout={this.handleLogout}/>\r\n                        }\r\n                        title=\"Social Media Project\"\r\n                        className='navbar'\r\n                    />\r\n                    <InSideHomePage\r\n                    userImgUrl={this.user.photoURL} \r\n                    userIconFirstLetter={this.user.displayName.toString().charAt(0).toUpperCase()}\r\n                    usnerName={this.user.displayName}\r\n                    userEmail={this.user.email}\r\n                    newimgUrl={this.user.photoURL}\r\n                    userId={this.user.uid}\r\n                    />\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Homepage","import React ,{Component}from 'react';\nimport UserSignin from './userinfo/userSignIn'\nimport Homepage from './dashboard/homepage'\nimport { Grid, Cell } from 'react-md';\nimport Loader from 'react-loader-spinner'\nimport firebaseApp from './firebase/config'\nimport firebase from 'firebase'\nimport './userinfo/userSign.css'\n\nclass App extends Component {\n\n  constructor(){\n    super()\n\n    this.state= {\n      loading:false,\n      loggedin:false,\n    }\n\n    this.auth = firebaseApp.auth()\n    this.data = firebaseApp.database().ref().child('loading');\n\n    this.handleLoggedIn = this.handleLoggedIn.bind(this)\n    this.handleNotLoggedIn = this.handleNotLoggedIn.bind(this)\n    \n    firebase.auth().onAuthStateChanged(firebaseUser => {\n      if(firebaseUser){\n        this.handleLoggedIn()\n      }else{\n        this.handleNotLoggedIn()\n      }\n    })\n    \n    \n  }\n\n  componentDidMount(){\n    setTimeout(() => {this.data.on('value' , snap => {\n      this.setState({\n        loading: snap.val()\n      })\n    })},4500)\n    \n  }\n\n  handleLoggedIn(){\n    this.setState({\n      loggedin:true,\n    })\n  }\n\n  handleNotLoggedIn(){\n    this.setState({\n      loggedin:false,\n    })\n  }\n  render(){\n    const checkloggedin = this.state.loggedin\n    {\n      //this checks if the webapp is connected to firebase\n      if(this.state.loading === false){\n          //Loading screen start\n        return(\n          <div className=\"LoadingScrean\">\n            <Loader type=\"Bars\" color=\"rgb(72, 219, 138)\" height={100} width={100}/>\n          </div>\n        );\n\n      }else{\n        //Loading screen done\n\n        if(checkloggedin === true){\n\n          //Homepage if logged in\n          return(\n          <div>\n            <Homepage/>\n          </div>\n          );\n\n        }else{\n          //Sign in Sign up Page if not logged in\n          return(\n          <div>\n            \n              <Grid>\n                <Cell size={1}><span></span></Cell>\n                <Cell size={10}>\n                  <div className='UserSignIn'>\n                    <center>\n                      <UserSignin/>\n                    </center>\n                  </div>   \n                </Cell>\n                <Cell size={1}><span></span></Cell>\n              </Grid>\n          </div>\n          );\n\n        }\n      }\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}